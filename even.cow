#
# Copyright (c) 2020 Brian Callahan <bcallah@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# Pager
# Assumes ANSI terminal

include "cowgol.coh";
include "file.coh";
include "argv.coh";

const YMAX := 24;
const XMAX := 80;

const UP := 0;
const DOWN := 1;

var BufferStart: [uint8];
var BufferEnd: [uint8];
var BufferLoc: [uint8];

var AtLine: uint16 := 0;
var lines: uint16 := 0;
var c: uint8 := 0;

#
# Misc
# Comment out this section when compiling for CP/M
#

sub SystemOn() is
	@asm "system(\"stty -icanon\");";
end sub;

sub SystemOff() is
	@asm "system(\"stty icanon\");";
	print_char(0o033);
	print("[2J");
	print_char(0o033);
	print("[H");
end sub;

#
# Curses, kinda
#

# \033[
sub ConsoleControl() is
	print_char(0o033);
	print_char('[');
end sub;

sub ConsoleClear() is
	ConsoleControl();
	print("2J");
end sub;

sub ConsoleGoto() is
	ConsoleControl();
	print_char('H');
end sub;

#
# Printing
#

sub LinePrint(): (done: uint8) is
	var x: uint8 := 0;

	c := [BufferLoc];
	while x < XMAX and c != 0 loop
		print_char(c);
		BufferLoc := BufferLoc + 1;

		if c == '\n' or c == 0 then
			break;
		end if;

		x := x + 1;
		c := [BufferLoc];
	end loop;

	while c != '\n' and c != 0 loop
		c := [BufferLoc];
		BufferLoc := BufferLoc + 1;
	end loop;

	if c == 0 then
		done := 1;
	else
		done := 0;
	end if;
end sub;

#
# Scrolling
#

sub Scroll(direction: uint8) is
	var line: uint16 := 0;
	var y: uint16 := 0;
	var done: uint8 := 0;

	if direction == DOWN then
		if AtLine != lines then
			AtLine := AtLine + 1;
		end if;
	else
		if AtLine != 0 then
			AtLine := AtLine - 1;
		end if;
	end if;

	BufferLoc := BufferStart;

	while line < AtLine loop
		c := [BufferLoc];
		while c != '\n' and c != 0 loop
			BufferLoc := BufferLoc + 1;
			c := [BufferLoc];
		end loop;
		BufferLoc := BufferLoc + 1;

		line := line + 1;
	end loop;

	ConsoleClear();
	ConsoleGoto();

	while y < YMAX and done == 0 loop
		done := LinePrint();
		y := y + 1;
	end loop;
end sub;

#
# File input
#

sub LoadFile(name: [uint8]) is
	var fcb: FCB;
	var len: uint32;

	if FCBOpenIn(&fcb, name) != 0 then
		SystemOff();
		ExitWithError();
	end if;

	len := FCBExt(&fcb);

	while len > 0 loop
		c := FCBGetChar(&fcb);

		if c < 0x20 or c > 0x7e then
			if c != 9 and c != 10 and c != 13 then
				break;
			end if;
		end if;

		if BufferLoc == BufferEnd then
			break;
		end if;

		if c == '\n' then
			lines := lines + 1;
		end if;

		[BufferLoc] := c;
		BufferLoc := BufferLoc + 1;

		len := len - 1;
	end loop;
	[BufferLoc] := 0;

	if FCBClose(&fcb) != 0 then
		SystemOff();
		ExitWithError();
	end if;
end sub;

#
# Main loop
#

ArgvInit();

var FileName: [uint8] := ArgvNext();

if FileName == (0 as [uint8]) then
	ExitWithError();
end if;

SystemOn();

BufferStart := LOMEM;
BufferEnd := HIMEM - 1;
[BufferEnd] := 0;

BufferLoc := BufferStart;
LoadFile(FileName);
BufferLoc := BufferStart;

ConsoleClear();
ConsoleGoto();

var done: uint8 := 0;
var y: uint8 := 0;
while y < YMAX and done == 0 loop
	done := LinePrint();
	y := y + 1;
end loop;

loop
	var ch: uint8 := get_char();

	case ch is
		when 'j': Scroll(DOWN);
		when 'k': Scroll(UP);
		when 'q': SystemOff(); Exit();
		# CP/M version, when 'q': ConsoleClear(); Exit();
	end case;
end loop;
